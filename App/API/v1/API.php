<?php

namespace App\API\v1;

use KalnaBase\System;
use KalnaBase\Utilities;
use KalnaBase\Utilities\Functions as Func;

defined('DIRSEP') or define('DIRSEP', DIRECTORY_SEPARATOR);
defined('SITEPATH') or define('SITEPATH', realpath(dirname(__FILE__) . DIRSEP . '..' . DIRSEP . '..' . DIRSEP . '..') . DIRSEP);
defined('APPPATH') or define('APPPATH', realpath(SITEPATH) . DIRSEP . 'App' . DIRSEP);
require_once (SITEPATH . 'vendor/autoload.php');

class API extends Utilities\REST {

    public $con;

    public function __construct($format = 'object') {
        parent::__construct($format);    // Init parent contructor
        $this->con = new System\DatabaseAbstraction($format);
    }

    protected function metadata() {

        if ($this->getRequestMethod() === "GET") {
            $dbName = $this->appConfig->values['database']['db_name'];
            $metadata = [];
//            print_r($this->request['collection']);
            $metadata['metadataVersion'] = $dbName . '.0.0.1';
            if ($this->request['collection'][0] === "") {
                $tablesStmt = $this->con->getAllTableNames();
                for ($i = 0; $i < count($tablesStmt); $i++) {
//                    print_r($i);
                    $metadata['structuralTypes'][$i] = $this->getMetadata($dbName, $tablesStmt[$i]['TABLE_NAME']);
                }
            } else {
                $metadata['structuralTypes'][0] = $this->getMetadata($dbName, $this->request['collection']);
            }
//        print_r($this->request['collection']);
//            if (empty($dataPropertiesStmt->errors) && count($dataPropertiesStmt) > 0) {
            $metadata = Func\ArrayFunctions::keysToCamelCase($metadata);
            $this->response($this->json($metadata), 200); // send user details
//            } elseif (!empty($stmt->errors)) {
            $this->response($this->json($dataPropertiesStmt->errors), 406);
//            }
        } else {
            $this->response('', 406);
        }
    }

    private function getMetadata($dbName, $tableName) {
//        print_r($tableName);
        $dataPropertiesKeyConvetions = ['column_name' => 'name', 'nullable' => 'isNullable', 'primary_key' => 'isPartOfKey'];
        $dataPropertiesValueConvetions = ['bigint' => 'Int64', 'int' => 'Int32', 'mediumint' => 'Int32', 'smallint' => 'Int16', 'tinyint' => 'Int16', 'varchar' => 'String', 'text' => 'String', 'bit' => 'Boolean', 'date' => 'Date', 'datetime' => 'DateTime', 'time' => 'Time'];
        $metadata = [];
        $metadata['shortName'] = Func\stringFunctions::transform($tableName, Func\stringFunctions::PASCAL_CASE);
        $metadata['namespace'] = $dbName . '.Model';
        $metadata['autoGeneratedKeyType'] = 'KeyGenerator';
        $metadata['defaultResourceName'] = $metadata['shortName'];
        $dataPropertiesStmt = $this->con->from($tableName)->getMetadata();
        
        $dataPropertiesStmt = Func\ArrayFunctions::valuesToCamelCase($dataPropertiesStmt, 'name');
        $dataPropertiesStmt = Func\ArrayFunctions::replaceKeys($dataPropertiesKeyConvetions, $dataPropertiesStmt);
        $dataPropertiesStmt = Func\ArrayFunctions::replaceValues($dataPropertiesValueConvetions, $dataPropertiesStmt);
        $metadata['dataProperties'] = $dataPropertiesStmt;

        $navigationPropertiesStmt = $this->con->from($tableName)->getDependedTables();

        for ($i = 0; $i < count($navigationPropertiesStmt); $i++) {
            foreach (array_keys($navigationPropertiesStmt[$i]) as $key) {
                # Working with references here to avoid copying the value.
                $value = &$navigationPropertiesStmt[$i][$key];
                unset($navigationPropertiesStmt[$i][$key]);
                switch ($key) {
                    case 'depTable':
                        $navigationPropertiesStmt[$i]['name'] = Func\stringFunctions::transform($value, Func\stringFunctions::CAMEL_CASE);
                        $navigationPropertiesStmt[$i]['entityTypeName'] = Func\stringFunctions::transform($value, Func\stringFunctions::PASCAL_CASE).':#'.$metadata['namespace'];
                        $navigationPropertiesStmt[$i]['isScalar'] = 'true';
                        $navigationPropertiesStmt[$i]['associationName'] = 'PARENT_CHILD_ASSOC_' . Func\stringFunctions::transform($tableName, Func\stringFunctions::PASCAL_CASE) . '_' . Func\stringFunctions::transform($value, Func\stringFunctions::PASCAL_CASE);
                        break;
                    case 'depColumn':
                        $navigationPropertiesStmt[$i]['foreignKeyNames'][0] = Func\stringFunctions::transform($value, Func\stringFunctions::CAMEL_CASE);
                        break;

                    default:
                        break;
                }
                # Do not forget to unset references!
                unset($value);
            }
        }
        $metadata['navigationProperties'] = $navigationPropertiesStmt;
        
        
        $referentialPropertiesStmt = $this->con->from($tableName)->getReferentialTables();

        for ($i = 0; $i < count($referentialPropertiesStmt); $i++) {
            foreach (array_keys($referentialPropertiesStmt[$i]) as $key) {
                # Working with references here to avoid copying the value.
                $value = &$referentialPropertiesStmt[$i][$key];
                unset($referentialPropertiesStmt[$i][$key]);
                switch ($key) {
                    case 'refTable':
                        $referentialPropertiesStmt[$i]['name'] = Func\stringFunctions::transform($value, Func\stringFunctions::CAMEL_CASE);
                        $referentialPropertiesStmt[$i]['entityTypeName'] = Func\stringFunctions::transform($value, Func\stringFunctions::PASCAL_CASE).':#'.$metadata['namespace'];
                        $referentialPropertiesStmt[$i]['isScalar'] = 'false';
                        $referentialPropertiesStmt[$i]['associationName'] = 'PARENT_CHILD_ASSOC_' . Func\stringFunctions::transform($value, Func\stringFunctions::PASCAL_CASE) . '_' . Func\stringFunctions::transform($tableName, Func\stringFunctions::PASCAL_CASE);
                        break;

                    default:
                        break;
                }
                # Do not forget to unset references!
                unset($value);
            }
        }
        $metadata['navigationProperties'] = array_merge($navigationPropertiesStmt, $referentialPropertiesStmt);
//        print_r($metadata);
        return $metadata;
    }

    protected function tableData() {
        if ($this->getRequestMethod() !== "GET") {
            $this->response('', 406);
        }
        $id = (int) Func\NullFunctions::nvl($this->request['id'], $this->request['instance']);
        $instanceCollection = $this->request['instanceCollection'];

        $collection = $this->request['collection'];

        if ($this->getRequestMethod() === "GET") {
            $expand = $this->request['expand'];


            if ($id > 0 && !empty($instanceCollection)) {
                $depTables = $this->connection->from($collection)->getDependedTables();
                if (!empty($depTables)) {
                    $depTable = Func\ArrayFunctions::arrayTrim($depTables, 'depTable', $instanceCollection);
                }
//                    print_r($depTable);
                if (!empty($depTable)) {
                    try {
                        $stmt = $this->connection->from($depTable[0]['depTable'], 'coll')
                                ->selectAll('coll')
                                ->equals('coll', $depTable[0]['depColumn'], $id)
                                ->query()
                                ->fetch();
                    } catch (\PDOException $exc) {
//                        $this->response($exc->getTraceAsString(), 406); // If no collection-match "Not Acceptable" status
                        $this->response('No such instance collection', 406); // If no collection-match "Not Acceptable" status
                    }
                } else {
//                    $this->response('', 406); // If no collection-match "Not Acceptable" status
                    $this->response('No such instance collection', 406); // If no collection-match "Not Acceptable" status
                }
            } elseif ($id > 0) {
                try {
                    $stmt = $this->connection->from($collection, $collection)->selectAll($collection)->idEquals($collection, $id)->query()->fetch();
                } catch (\PDOException $exc) {
//                    $this->response($exc->getTraceAsString(), 406); // If no collection-match "Not Acceptable" status
                    $this->response('No such datacollection', 406); // If no collection-match "Not Acceptable" status
                }
            } else {
                try {
                    $stmt = $this->connection->from($collection, $collection)->selectAll($collection)->query()->fetch();
                } catch (\PDOException $exc) {
//                    $this->response($exc->getTraceAsString(), 406); // If no collection-match "Not Acceptable" status
                    $this->response('No such datacollection', 406); // If no collection-match "Not Acceptable" status
                }
            }

            if (!empty($expand) && count($stmt) > 0) {
                $expandCollections = explode(',', $expand);
                $depTables = $this->connection->from($collection)->getDependedTables();
                foreach ($expandCollections as $expandValue) {
                    if (!empty($depTables)) {
                        $depTable = Func\ArrayFunctions::arrayTrim($depTables, 'depTable', $expandValue);
                    }
                    if (!empty($depTable)) {
                        $inValues = [];
                        foreach ($stmt as $value) {
                            $inValues = array_column($value, $depTable[0][refColumn]);
                        }

                        try {
                            $exStmt = $this->con->from($depTable[0]['depTable'], $depTable[0]['depTable'])
                                    ->selectAll($depTable[0]['depTable'])
                                    ->oneOf($depTable[0]['depTable'], $depTable[0]['depColumn'], $inValues)
                                    ->query()
                                    ->fetch();
                        } catch (\PDOException $exc) {
//                            $this->response($exc->getTraceAsString(), 406); // If no collection-match "Not Acceptable" status
                            $this->response('No such datacollection', 406); // If no collection-match "Not Acceptable" status
                        }
                        for ($i = 0; $i < count($stmt); $i++) {
                            $stmt[$i][$depTable[0]['depTable']] = Func\ArrayFunctions::arrayTrim($exStmt, $depTable[0]['depColumn'], $stmt[$i][$depTable[0]['refColumn']]);
                        }
                    }
                }
            }
            if (empty($stmt->errors) && count($stmt) > 0) {
                $stmt = Func\ArrayFunctions::keysToCamelCase($stmt);
                $this->response($this->json($stmt), 200); // send user details
            }
        }
        if ($this->getRequestMethod() === "POST") {
            if ($id > 0) {
                $stmt = $this->connection->addValue('name', $this->request['name'])
                        ->addValue('datatype', $this->request['datatype'])
                        ->addValue('description', $this->request['description'])
                        ->update('data_types', $id);
                if (empty($stmt->errors) && $stmt > 0) {
                    $this->response($this->json($stmt), 200); // send user details
                }
            } else {
                $stmt = $this->connection->addValue('name', $this->request['name'])
                        ->addValue('datatype', $this->request['datatype'])
                        ->addValue('description', $this->request['description'])
                        ->insert('data_types');
                if (empty($stmt->errors) && $stmt['affectedRows'] > 0) {
                    $this->response($this->json(['location' => '/datatypes/' . $stmt['lastId']]), 201); // send user details
                }
            }
        }

        $this->response('', 204); // If no records "No Content" status
    }

    protected function dataTypes() {
        if ($this->getRequestMethod() !== "GET") {
            $this->response('', 406);
        }
        $id = (int) Func\NullFunctions::nvl($this->request['id'], $this->request['instance']);
        $instanceCollection = $this->request['instanceCollection'];

        if ($this->getRequestMethod() === "GET") {
            if ($id > 0 && !empty($instanceCollection)) {
                $depTables = $this->connection->from($collection)->getDependedTables();
                if (!is_null($depTables)) {
                    $depTable = Func\ArrayFunctions::arrayTrim($depTables, 'depTable', $instanceCollection);
                }
                if (!is_null($depTable)) {
//                    print_r($depTable);
                    $stmt = $this->connection->from($depTable[0]['depTable'], 'coll')
                            ->selectAll('coll')
                            ->equals('coll', $depTable[0]['depColumn'], $id)
                            ->query()
                            ->fetch();
                    if (empty($stmt->errors) && count($stmt) > 0) {
                        $this->response($this->json($stmt), 200); // send user details
                    }
                } else {
                    $this->response('', 406); // If no collection-match "Not Acceptable" status
                }
            } elseif ($id > 0) {
                $stmt = $this->connection->from('data_types', 'dattyp')->selectAll('dattyp')->idEquals('dattyp', $id)->query()->fetch();
                if (empty($stmt->errors) && count($stmt) > 0) {
                    $this->response($this->json($stmt), 200); // send user details
                }
            } else {
                $stmt = $this->connection->from('data_types', 'dattyp')->joinLeft('field_types', 'fldtyp', 'dattyp.id = fldtyp.id')->selectAll('dattyp')->select('fldtyp', 'name', 'field_name')->query()->fetch();
                if (empty($stmt->errors) && count($stmt) > 0) {
                    $this->response($this->json($stmt), 200); // send user details
                }
            }
        }
        if ($this->getRequestMethod() === "POST") {
            if ($id > 0) {
                $stmt = $this->connection->addValue('name', $this->request['name'])
                        ->addValue('datatype', $this->request['datatype'])
                        ->addValue('description', $this->request['description'])
                        ->update('data_types', $id);
                if (empty($stmt->errors) && $stmt > 0) {
                    $this->response($this->json($stmt), 200); // send user details
                }
            } else {
                $stmt = $this->connection->addValue('name', $this->request['name'])
                        ->addValue('datatype', $this->request['datatype'])
                        ->addValue('description', $this->request['description'])
                        ->insert('data_types');
                if (empty($stmt->errors) && $stmt['affectedRows'] > 0) {
                    $this->response($this->json(['location' => '/datatypes/' . $stmt['lastId']]), 201); // send user details
                }
            }
        }

        $this->response('', 204); // If no records "No Content" status
    }

    protected function fieldTypes() {
        if ($this->getRequestMethod() != "GET") {
            $this->response('', 406);
        }
        $id = (int) Func\NullFunctions::nvl($this->request['id'], $this->request['instance']);
        $instanceCollection = $this->request['instanceCollection'];

        if ($this->getRequestMethod() == "GET") {
            if ($id > 0 && !empty($instanceCollection)) {
                $depTables = $this->connection->from($collection)->getDependedTables();
                if (!is_null($depTables)) {
                    $depTable = Func\ArrayFunctions::arrayTrim($depTables, 'depTable', $instanceCollection);
                }
                if (!is_null($depTable)) {

                    $stmt = $this->connection->from($depTable[0]['depTable'], 'coll')
                            ->selectAll('coll')
                            ->equals('coll', $depTable[0]['depColumn'], $id)
                            ->query()
                            ->fetch();
                    if (empty($stmt->errors) && count($stmt) > 0) {
                        $this->response($this->json($stmt), 200); // send user details
                    }
                } else {
                    $this->response('', 406); // If no collection-match "Not Acceptable" status
                }
            } elseif ($id > 0) {
                $stmt = $this->connection->setSQL('SELECT * FROM field_types fldtyp WHERE fldtyp.id = ' . $id)->query()->fetch();
                if (empty($stmt->errors) && count($stmt) > 0) {
                    $this->response($this->json($stmt), 200); // send user details
                }
            } else {
                $stmt = $this->connection->from('field_types', 'fldtyp')
                        ->selectAll('fldtyp')
                        ->query()
                        ->fetch();
                if (empty($stmt->errors) && count($stmt) > 0) {
                    $this->response($this->json($stmt), 200); // send user details
                }
            }
        }
        if ($this->getRequestMethod() == "POST") {
            if ($id > 0) {
                $stmt = $this->connection->addValue('name', $this->request['name'])
                        ->addValue('datatype', $this->request['datatype'])
                        ->addValue('description', $this->request['description'])
                        ->update('data_types', $id);
                if (empty($stmt->errors) && $stmt > 0) {
                    $this->response($this->json($stmt), 200); // send user details
                }
            } else {
                $stmt = $this->connection->addValue('name', $this->request['name'])
                        ->addValue('datatype', $this->request['datatype'])
                        ->addValue('description', $this->request['description'])
                        ->insert('data_types');
                if (empty($stmt->errors) && $stmt['affectedRows'] > 0) {
                    $this->response($this->json(['location' => '/datatypes/' . $stmt['lastId']]), 201); // send user details
                }
            }
        }

        $this->response('', 204); // If no records "No Content" status
    }

    private function insertCustomer() {
        if ($this->getRequestMethod() != "POST") {
            $this->response('', 406);
        }

        $customer = json_decode(file_get_contents("php://input"), true);
        $column_names = array('customerName', 'email', 'city', 'address', 'country');
        $keys = array_keys($customer);
        $columns = '';
        $values = '';
        foreach ($column_names as $desired_key) { // Check the customer received. If blank insert blank into the array.
            if (!in_array($desired_key, $keys)) {
                $$desired_key = '';
            } else {
                $$desired_key = $customer[$desired_key];
            }
            $columns = $columns . $desired_key . ',';
            $values = $values . "'" . $$desired_key . "',";
        }
        $query = "INSERT INTO angularcode_customers(" . trim($columns, ',') . ") VALUES(" . trim($values, ',') . ")";
        if (!empty($customer)) {
            $r = $this->connectionnection->query($query) or die($this->connectionnection->error . __LINE__);
            $success = array('status' => "Success", "msg" => "Customer Created Successfully.", "data" => $customer);
            $this->response($this->json($success), 200);
        } else {
            $this->response('', 204); //"No Content" status
        }
    }

    private function updateCustomer() {
        if ($this->getRequestMethod() != "POST") {
            $this->response('', 406);
        }
        $customer = json_decode(file_get_contents("php://input"), true);
        $id = (int) $customer['id'];
        $column_names = array('customerName', 'email', 'city', 'address', 'country');
        $keys = array_keys($customer['customer']);
        $columns = '';
        $values = '';
        foreach ($column_names as $desired_key) { // Check the customer received. If key does not exist, insert blank into the array.
            if (!in_array($desired_key, $keys)) {
                $$desired_key = '';
            } else {
                $$desired_key = $customer['customer'][$desired_key];
            }
            $columns = $columns . $desired_key . "='" . $$desired_key . "',";
        }
        $query = "UPDATE angularcode_customers SET " . trim($columns, ',') . " WHERE customerNumber=$id";
        if (!empty($customer)) {
            $r = $this->connectionnection->query($query) or die($this->connectionnection->error . __LINE__);
            $success = array('status' => "Success", "msg" => "Customer " . $id . " Updated Successfully.", "data" => $customer);
            $this->response($this->json($success), 200);
        } else {
            $this->response('', 204); // "No Content" status
        }
    }

    private function deleteCustomer() {
        if ($this->getRequestMethod() != "DELETE") {
            $this->response('', 406);
        }
        $id = (int) $this->request['id'];
        if ($id > 0) {
            $query = "DELETE FROM angularcode_customers WHERE customerNumber = $id";
            $r = $this->connectionnection->query($query) or die($this->connectionnection->error . __LINE__);
            $success = array('status' => "Success", "msg" => "Successfully deleted one record.");
            $this->response($this->json($success), 200);
        } else {

            $this->response('', 204); // If no records "No Content" status
        }
    }

}

// Initiiate Library
$api = new API('json');
$api->processApi();
