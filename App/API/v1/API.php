<?php

namespace App\API\v1;

use KalnaBase\System;
use KalnaBase\Utilities;
use KalnaBase\Utilities\Functions as Func;

defined('DIRSEP') or define('DIRSEP', DIRECTORY_SEPARATOR);
defined('SITEPATH') or define('SITEPATH', realpath(dirname(__FILE__) . DIRSEP . '..' . DIRSEP . '..' . DIRSEP . '..') . DIRSEP);
defined('APPPATH') or define('APPPATH', realpath(SITEPATH) . DIRSEP . 'App' . DIRSEP);
require_once (SITEPATH . 'vendor/autoload.php');

class API extends Utilities\REST {

    public $con;
    private $mysqlToPhpTypeConversions = ['integer' => ['bigint', 'int', 'mediumint', 'smallint', 'tinyint'], 'string' => ['varchar', 'text'], 'boolean' => ['bit'], 'date' => ['date'], 'datetime' => ['dateTime'], 'time' => ['time']];

    public function __construct($format = 'object') {
        parent::__construct($format);    // Init parent contructor
//        var_dump($format);
        $this->con = new System\DatabaseAbstraction($format);
    }

    protected function metadata() {

        if ($this->getRequestMethod() === "GET") {
            $dbName = $this->appConfig->values['database']['db_name'];
            $metadata = [];
//            print_r($this->request['collection']);
            $metadata['metadataVersion'] = '1.0.5';
            if ($this->request['collection'][0] === "") {
                $tablesStmt = $this->con->getAllTableNames();
                for ($i = 0; $i < count($tablesStmt); $i++) {
//                    print_r($i);
                    $metadata['structuralTypes'][$i] = $this->getMetadata($dbName, $tablesStmt[$i]['TABLE_NAME']);
                }
            } else {
                $metadata['structuralTypes'][0] = $this->getMetadata($dbName, $this->request['collection']);
            }
//        print_r($this->request['collection']);
//            if (empty($dataPropertiesStmt->errors) && count($dataPropertiesStmt) > 0) {
            $metadata = Func\ArrayFunctions::keysToCamelCase($metadata);
            $this->response($this->json($metadata), 200); // send user details
//            } elseif (!empty($stmt->errors)) {
            $this->response($this->json($dataPropertiesStmt->errors), 406);
//            }
        } else {
            $this->response('', 406);
        }
    }

    private function getMetadata($dbName, $tableName) {
//        print_r($tableName);
        $dataPropertiesKeyConversions = ['column_name' => 'name', 'is_nullable' => 'isNullable', 'max_length' => 'maxLength', 'primary_key' => 'isPartOfKey'];
        $dataPropertiesValueConversions = ['bigint' => 'Int64', 'int' => 'Int32', 'mediumint' => 'Int32', 'smallint' => 'Int16', 'tinyint' => 'Int16', 'varchar' => 'String', 'text' => 'String', 'bit' => 'Boolean', 'date' => 'Date', 'datetime' => 'DateTime', 'time' => 'Time'];
        $dataPropertiesValueCastColumns = ['boolean' => ['isNullable', 'isPartOfKey'], 'integer' => ['maxLength']];
        $metadata = [];
        $metadata['shortName'] = Func\stringFunctions::transform($tableName, Func\stringFunctions::PASCAL_CASE);
        $metadata['namespace'] = $dbName . '.Model';
        $metadata['autoGeneratedKeyType'] = 'KeyGenerator';
        $metadata['defaultResourceName'] = $metadata['shortName'];
        $dataPropertiesStmt = $this->con->from($tableName)->getMetadata();
//        var_dump($dataPropertiesStmt);
//        $dataPropertiesStmt = Func\ArrayFunctions::removeEmptyKeys($dataPropertiesStmt);
        $dataPropertiesStmt = array_filter(array_map('array_filter', $dataPropertiesStmt));
        $dataPropertiesStmt = Func\ArrayFunctions::valuesToCamelCase($dataPropertiesStmt, 'name');
        $dataPropertiesStmt = Func\ArrayFunctions::replaceKeys($dataPropertiesKeyConversions, $dataPropertiesStmt);
        $dataPropertiesStmt = Func\ArrayFunctions::replaceValues($dataPropertiesValueConversions, $dataPropertiesStmt);
        $dataPropertiesStmt = Func\ArrayFunctions::castValues($dataPropertiesValueCastColumns, $dataPropertiesStmt);
//        print_r($dataPropertiesStmt);
        $metadata['dataProperties'] = array_filter($dataPropertiesStmt);

        $navigationPropertiesStmt = $this->con->from($tableName)->getDependedTables();

        for ($i = 0; $i < count($navigationPropertiesStmt); $i++) {
            foreach (array_keys($navigationPropertiesStmt[$i]) as $key) {
                # Working with references here to avoid copying the value.
                $value = &$navigationPropertiesStmt[$i][$key];
                unset($navigationPropertiesStmt[$i][$key]);
                switch ($key) {
                    case 'depTable':
                        $navigationPropertiesStmt[$i]['name'] = Func\stringFunctions::transform($value, Func\stringFunctions::CAMEL_CASE);
                        $navigationPropertiesStmt[$i]['entityTypeName'] = Func\stringFunctions::transform($value, Func\stringFunctions::PASCAL_CASE) . ':#' . $metadata['namespace'];
                        $navigationPropertiesStmt[$i]['isScalar'] = TRUE;
                        $navigationPropertiesStmt[$i]['associationName'] = 'PARENT_CHILD_ASSOC_' . Func\stringFunctions::transform($tableName, Func\stringFunctions::PASCAL_CASE) . '_' . Func\stringFunctions::transform($value, Func\stringFunctions::PASCAL_CASE);
                        break;
                    case 'depColumn':
                        $navigationPropertiesStmt[$i]['foreignKeyNames'][0] = Func\stringFunctions::transform($value, Func\stringFunctions::CAMEL_CASE);
                        break;

                    default:
                        break;
                }
                # Do not forget to unset references!
                unset($value);
            }
        }
        $metadata['navigationProperties'] = $navigationPropertiesStmt;


        $referentialPropertiesStmt = $this->con->from($tableName)->getReferentialTables();

        for ($i = 0; $i < count($referentialPropertiesStmt); $i++) {
            foreach (array_keys($referentialPropertiesStmt[$i]) as $key) {
                # Working with references here to avoid copying the value.
                $value = &$referentialPropertiesStmt[$i][$key];
                unset($referentialPropertiesStmt[$i][$key]);
                switch ($key) {
                    case 'refTable':
                        $referentialPropertiesStmt[$i]['name'] = Func\stringFunctions::transform($value, Func\stringFunctions::CAMEL_CASE);
                        $referentialPropertiesStmt[$i]['entityTypeName'] = Func\stringFunctions::transform($value, Func\stringFunctions::PASCAL_CASE) . ':#' . $metadata['namespace'];
                        $referentialPropertiesStmt[$i]['isScalar'] = FALSE;
                        $referentialPropertiesStmt[$i]['associationName'] = 'PARENT_CHILD_ASSOC_' . Func\stringFunctions::transform($value, Func\stringFunctions::PASCAL_CASE) . '_' . Func\stringFunctions::transform($tableName, Func\stringFunctions::PASCAL_CASE);
                        break;

                    default:
                        break;
                }
                # Do not forget to unset references!
                unset($value);
            }
        }
        $metadata['navigationProperties'] = array_merge($navigationPropertiesStmt, $referentialPropertiesStmt);
//        print_r($metadata);
        return $metadata;
    }

    protected function getTableData() {
        $id = (integer) Func\NullFunctions::nvl($this->request['id'], $this->request['instance']);
        $instanceCollection = $this->request['instanceCollection'];

        $collection = $this->request['collection'];
        $dataPropertiesStmt = $this->con->from($collection)->getMetadata('php');
        $expand = $this->request['expand'];


        if ($id > 0 && !empty($instanceCollection)) {
            $depTables = $this->connection->from($collection)->getDependedTables();
            if (!empty($depTables)) {
                $depTable = Func\ArrayFunctions::arrayTrim($depTables, 'depTable', $instanceCollection);
            }
//$                    print_r($depTable);
            if (!empty($depTable)) {
                try {
                    $stmt = $this->connection->from($depTable[0]['depTable'])
                            ->selectAll()
                            ->equals($depTable[0]['depColumn'], $id)
                            ->query()
                            ->castValues()
                            ->fetch();
                } catch (\PDOException $exc) {
//                        $this->response(406, $exc->getTraceAsString()); // If no collection-match "Not Acceptable" status
                    $this->response(481); // If no collection-match "Not Acceptable" status
                }
            } else {
                $this->response(481); // If no collection-match "Not Acceptable" status
            }
        } elseif ($id > 0) {
            try {
                $stmt = $this->connection->from($collection)->selectAll()->idEquals($id)->query()->castValues()->fetch();
            } catch (\PDOException $exc) {
                throw $exc;
//                    $this->response(406, $exc->getTraceAsString()); // If no collection-match "Not Acceptable" status
                $this->response(480); // If no collection-match "Not Acceptable" status
            }
        } else {
            try {
                $stmt = $this->connection->from($collection)->selectAll()->query()->castValues()->fetch();
            } catch (\PDOException $exc) {
//                    throw $exc;
//                    $this->response(406, $exc->getTraceAsString()); // If no collection-match "Not Acceptable" status
                $this->response(480); // If no collection-match "Not Acceptable" status
            }
        }

//        if (count($stmt) > 0) {
//            $stmt = Func\ArrayFunctions::castValues($dataPropertiesValueCastColumns, $stmt);
//        }

        if (!empty($expand) && count($stmt) > 0) {
            $expandCollections = explode(',', $expand);
            $depTables = $this->connection->from($collection)->getDependedTables();
            foreach ($expandCollections as $expandValue) {
                if (!empty($depTables)) {
                    $depTable = Func\ArrayFunctions::arrayTrim($depTables, 'depTable', $expandValue);
                }
//                    var_dump($depTable);
                if (!empty($depTable)) {
                    $inValues = [];
//                    var_dump($stmt);
                    foreach ($stmt as $value) {
//                    var_dump($value);
                        $inValues[] = $value[$depTable[0]['refColumn']];
                    }
//                    var_dump($inValues);

                    try {
                        $exStmt = $this->con->from($depTable[0]['depTable'])
                                ->selectAll()
                                ->oneOf($depTable[0]['depColumn'], $inValues)
                                ->query();
//                        echo ($exStmt->getSQL());
                        foreach ($exStmt->getErrors() as $error) {
                            $this->setError(990, $error);
                        }

//                        var_dump ($exStmt->getParams());
                        $exRes = $exStmt->fetch();
                    } catch (\PDOException $exc) {
//                            $this->response(406, $exc->getTraceAsString()); // If no collection-match "Not Acceptable" status
                        $this->setError(961, $exc->getTraceAsString()); // If no collection-match "Not Acceptable" status
                    }
//                    var_dump($exRes);
                    for ($i = 0; $i < count($stmt); $i++) {
                        $stmt[$i][$depTable[0]['depTable']] = Func\ArrayFunctions::arrayTrim($exRes, $depTable[0]['depColumn'], $stmt[$i][$depTable[0]['refColumn']]);
                    }
                }
            }
        }
        if (!empty($this->errors)) {
            $this->response(406, $this->json(['errors' => $this->errors]));
        } elseif (count($stmt) > 0) {
            $stmt = Func\ArrayFunctions::keysToCamelCase($stmt);
            $this->response(200, $this->json($stmt)); // send user details
        }

        $this->response(501);
    }

    protected function postTableData() {
//        var_dump($this->jsonRequest);
        $id = (integer) Func\NullFunctions::nvl($this->request['id'], $this->request['instance']);
//        var_dump($id);
        $instanceCollection = $this->request['instanceCollection'];

        $collection = $this->request['collection'];
        $dataPropertiesStmt = $this->con->from($collection)->getMetadata('php');
//        var_dump($collection);
//        var_dump($dataPropertiesStmt);
        $stmt = $this->connection;
        foreach ($dataPropertiesStmt as $properties) {
            if (property_exists($this->jsonRequest, $properties['column_name'])) {
                /**
                 * TODO: Create error class
                 */
                if ($properties['is_nullable'] === 'false' && $properties['auto_increment'] === 'false' && empty($this->jsonRequest->$properties['column_name'])) {
                    $this->setError(901, 'The property "' . Func\stringFunctions::transform($properties['column_name'], Func\stringFunctions::CAMEL_CASE) . '" shall have a value');
                } elseif (!empty($this->jsonRequest->$properties['column_name']) && (integer) $properties['max_length'] < strlen($this->jsonRequest->$properties['column_name'])) {
                    $this->setError(902, 'The property "' . Func\stringFunctions::transform($properties['column_name'], Func\stringFunctions::CAMEL_CASE) . '" can only take a value length of '
                            . $properties['max_length'] . ' characters the provided value have a length of ' . strlen($this->jsonRequest->$properties['column_name']) . ' characters');
                }
//                var_dump($this->jsonRequest->$properties['column_name']);
                $stmt = $stmt->addValue($properties['column_name'], $this->jsonRequest->$properties['column_name']);
            }
        }
//        var_dump($this->errors);
        if (!empty($this->errors)) {
            $stmt->clear();
            $this->response(406, $this->json(['errors' => $this->errors]));
        } else {
            if (!empty($id)) {
                $stmt = $stmt->update(Func\stringFunctions::transform($collection, Func\stringFunctions::UNDER_SCORE), $id);
                if (empty($stmt->errors) && $stmt > 0) {
                    $this->response(200, $this->json($stmt)); // send user details
                }
            } else {
                $stmt = $stmt->table(Func\stringFunctions::transform($collection, Func\stringFunctions::UNDER_SCORE))->insert();
                if (empty($stmt->errors) && $stmt['affectedRows'] > 0) {
                    $this->response(201, $this->json(['location' => '/datatypes/' . $stmt['lastId']])); // send user details
                }
            }
        }
        $this->response(501);
    }

    protected function putTableData() {
//        var_dump($this->jsonRequest);
        $id = (integer) Func\NullFunctions::nvl($this->request['id'], $this->request['instance']);
//        var_dump($id);
        $instanceCollection = $this->request['instanceCollection'];

        $collection = $this->request['collection'];
        $dataPropertiesStmt = $this->con->from($collection)->getMetadata('php');
//        var_dump($collection);
//        var_dump($dataPropertiesStmt);
        $stmt = $this->connection;
        foreach ($dataPropertiesStmt as $properties) {
            if (property_exists($this->jsonRequest, $properties['column_name'])) {
                /**
                 * TODO: Create error class
                 */
                if ($properties['is_nullable'] === 'false' && $properties['auto_increment'] === 'false' && empty($this->jsonRequest->$properties['column_name'])) {
                    $this->setError(901, 'The property "' . Func\stringFunctions::transform($properties['column_name'], Func\stringFunctions::CAMEL_CASE) . '" shall have a value');
                } elseif (!empty($this->jsonRequest->$properties['column_name']) && (integer) $properties['max_length'] < strlen($this->jsonRequest->$properties['column_name'])) {
                    $this->setError(902, 'The property "' . Func\stringFunctions::transform($properties['column_name'], Func\stringFunctions::CAMEL_CASE) . '" can only take a value length of '
                            . $properties['max_length'] . ' characters the provided value have a length of ' . strlen($this->jsonRequest->$properties['column_name']) . ' characters');
                }
//                var_dump($this->jsonRequest->$properties['column_name']);
                $stmt = $stmt->addValue($properties['column_name'], $this->jsonRequest->$properties['column_name']);
            }
        }
        var_dump($this->errors);
        var_dump($id);
        if (!empty($this->errors)) {
            $stmt->clear();
            $this->response(406, $this->json(['errors' => $this->errors]));
        } else {
            if (!empty($id)) {
                $stmt = $stmt->table(Func\stringFunctions::transform($collection, Func\stringFunctions::UNDER_SCORE))->update($id);
                if (empty($stmt->errors) && $stmt > 0) {
                    $this->response(200, $this->json($stmt)); // send user details
                }
            } else {
                $stmt = $stmt->table(Func\stringFunctions::transform($collection, Func\stringFunctions::UNDER_SCORE))->insert();
                if (empty($stmt->errors) && $stmt['affectedRows'] > 0) {
                    $this->response(201, $this->json(['location' => '/datatypes/' . $stmt['lastId']])); // send user details
                }
            }
            if (!empty($stmt->errors)) {
                $stmt->clear();
                $this->response(406, $this->json(['errors' => $stmt->errors]));
            }
        }
//        var_dump($this);
        $this->response(501);
    }

    protected function deleteTableData() {
        $id = (integer) Func\NullFunctions::nvl($this->request['id'], $this->request['instance']);
        if (empty($id)) {
            $this->setError(930, 'A delete request for "' . Func\stringFunctions::transform($this->request['collection'], Func\stringFunctions::CAMEL_CASE) . '" shall provide an entity identicator');
        }
        if (!empty($this->errors)) {
            $this->response(406, $this->json(['errors' => $this->errors]));
        } else {
            $collection = Func\stringFunctions::transform($this->request['collection'], Func\stringFunctions::UNDER_SCORE);
            $rowCount = $this->connection->from($collection)->delete($id);
            $this->response(200, $this->json($rowCount));
        }
//        $this->response(501);
    }

    protected function generateModel() {
        $model = $this->connection->generateModelDefinition();
//        var_export($expression);
//        $filePath = realpath(dirname(__FILE__) . DIRSEP . '..' . DIRSEP . '..' . DIRSEP . '..') . DIRSEP . 'vendor' . DIRSEP . 'KalnaBase' . DIRSEP . 'Models' . DIRSEP . 'ModelDefinition';
//        echo $filePath;
//        $fileRes = file_put_contents($filePath, var_export($expression));
        $result = $this->connection->into('settings')->addValue('value', json_encode($model))->insertOrUpdate('ModelDefinition');
        if ($result > 1) {
            $this->response(201, $this->json($result));
        } elseif ($result === 1) {
            $this->response(209, $this->json('Updated'));
        } elseif ($result === 0) {
            $this->response(200, $this->json('No change'));
        } else {
            $this->response(200, $this->json($result));
        }
//        echo json_encode($result, JSON_PRETTY_PRINT);
//        echo '$fileRes: ' . $fileRes;
    }

    protected function dataTypesOld() {
        if ($this->getRequestMethod() !== "GET") {
            $this->response('', 406);
        }
        $id = (int) Func\NullFunctions::nvl($this->request['id'], $this->request['instance']);
        $instanceCollection = $this->request['instanceCollection'];

        if ($this->getRequestMethod() === "GET") {
            if ($id > 0 && !empty($instanceCollection)) {
                $depTables = $this->connection->from($collection)->getDependedTables();
                if (!is_null($depTables)) {
                    $depTable = Func\ArrayFunctions::arrayTrim($depTables, 'depTable', $instanceCollection);
                }
                if (!is_null($depTable)) {
//                    print_r($depTable);
                    $stmt = $this->connection->from($depTable[0]['depTable'], 'coll')
                            ->selectAll('coll')
                            ->equals('coll', $depTable[0]['depColumn'], $id)
                            ->query()
                            ->fetch();
                    if (empty($stmt->errors) && count($stmt) > 0) {
                        $this->response($this->json($stmt), 200); // send user details
                    }
                } else {
                    $this->response('', 406); // If no collection-match "Not Acceptable" status
                }
            } elseif ($id > 0) {
                $stmt = $this->connection->from('data_types', 'dattyp')->selectAll('dattyp')->idEquals('dattyp', $id)->query()->fetch();
                if (empty($stmt->errors) && count($stmt) > 0) {
                    $this->response($this->json($stmt), 200); // send user details
                }
            } else {
                $stmt = $this->connection->from('data_types', 'dattyp')->joinLeft('field_types', 'fldtyp', 'dattyp.id = fldtyp.id')->selectAll('dattyp')->select('fldtyp', 'name', 'field_name')->query()->fetch();
                if (empty($stmt->errors) && count($stmt) > 0) {
                    $this->response($this->json($stmt), 200); // send user details
                }
            }
        }
        if ($this->getRequestMethod() === "POST") {
            if ($id > 0) {
                $stmt = $this->connection->addValue('name', $this->request['name'])
                        ->addValue('datatype', $this->request['datatype'])
                        ->addValue('description', $this->request['description'])
                        ->update('data_types', $id);
                if (empty($stmt->errors) && $stmt > 0) {
                    $this->response($this->json($stmt), 200); // send user details
                }
            } else {
                $stmt = $this->connection->addValue('name', $this->request['name'])
                        ->addValue('datatype', $this->request['datatype'])
                        ->addValue('description', $this->request['description'])
                        ->insert('data_types');
                if (empty($stmt->errors) && $stmt['affectedRows'] > 0) {
                    $this->response($this->json(['location' => '/datatypes/' . $stmt['lastId']]), 201); // send user details
                }
            }
        }

        $this->response('', 204); // If no records "No Content" status
    }

    protected function fieldTypesOld() {
        if ($this->getRequestMethod() != "GET") {
            $this->response('', 406);
        }
        $id = (int) Func\NullFunctions::nvl($this->request['id'], $this->request['instance']);
        $instanceCollection = $this->request['instanceCollection'];

        if ($this->getRequestMethod() == "GET") {
            if ($id > 0 && !empty($instanceCollection)) {
                $depTables = $this->connection->from($collection)->getDependedTables();
                if (!is_null($depTables)) {
                    $depTable = Func\ArrayFunctions::arrayTrim($depTables, 'depTable', $instanceCollection);
                }
                if (!is_null($depTable)) {

                    $stmt = $this->connection->from($depTable[0]['depTable'], 'coll')
                            ->selectAll('coll')
                            ->equals('coll', $depTable[0]['depColumn'], $id)
                            ->query()
                            ->fetch();
                    if (empty($stmt->errors) && count($stmt) > 0) {
                        $this->response($this->json($stmt), 200); // send user details
                    }
                } else {
                    $this->response('', 406); // If no collection-match "Not Acceptable" status
                }
            } elseif ($id > 0) {
                $stmt = $this->connection->setSQL('SELECT * FROM field_types fldtyp WHERE fldtyp.id = ' . $id)->query()->fetch();
                if (empty($stmt->errors) && count($stmt) > 0) {
                    $this->response($this->json($stmt), 200); // send user details
                }
            } else {
                $stmt = $this->connection->from('field_types', 'fldtyp')
                        ->selectAll('fldtyp')
                        ->query()
                        ->fetch();
                if (empty($stmt->errors) && count($stmt) > 0) {
                    $this->response($this->json($stmt), 200); // send user details
                }
            }
        }
        if ($this->getRequestMethod() == "POST") {
            if ($id > 0) {
                $stmt = $this->connection->addValue('name', $this->request['name'])
                        ->addValue('datatype', $this->request['datatype'])
                        ->addValue('description', $this->request['description'])
                        ->update('data_types', $id);
                if (empty($stmt->errors) && $stmt > 0) {
                    $this->response($this->json($stmt), 200); // send user details
                }
            } else {
                $stmt = $this->connection->addValue('name', $this->request['name'])
                        ->addValue('datatype', $this->request['datatype'])
                        ->addValue('description', $this->request['description'])
                        ->insert('data_types');
                if (empty($stmt->errors) && $stmt['affectedRows'] > 0) {
                    $this->response($this->json(['location' => '/datatypes/' . $stmt['lastId']]), 201); // send user details
                }
            }
        }

        $this->response('', 204); // If no records "No Content" status
    }

}

// Initiiate Library
$api = new API('json');
$api->processApi();
